from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from googletrans import Translator
import asyncio

TOKEN = ""
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
translator = Translator()

@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.\n"
        "–Ø –ø–µ—Ä–µ–≤–æ–∂—É —Ç–µ—Ä–º–∏–Ω—ã —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /translate <—Ç–µ—Ä–º–∏–Ω> –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
        "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/translate <—Ç–µ—Ä–º–∏–Ω> - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
        "/translate liability - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ—Ä–º–∏–Ω 'liability' –Ω–∞ —Ä—É—Å—Å–∫–∏–π\n"
        "/translate –∏—Å–∫ - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ—Ä–º–∏–Ω '–∏—Å–∫' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"
    )
    await message.answer(help_text)

@dp.message(Command("translate"))
async def cmd_translate(message: Message):
    parts = message.text.split()
    
    if len(parts) == 1:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /translate")
        return
    elif len(parts) > 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–µ—Ä–º–∏–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
        return
        
    term = parts[1]
    
    try:
        detected = translator.detect(term)
        
        if detected.lang == 'ru':
            translation = translator.translate(term, src='ru', dest='en')
            await message.answer(f"üîÑ –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ—Ä–º–∏–Ω–∞: {translation.text}")
        else:
            translation = translator.translate(term, src='en', dest='ru')
            await message.answer(f"üîÑ –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ—Ä–º–∏–Ω–∞: {translation.text}")
            
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())